functions:
  start_config: |
    Inicia o script.

    Esta função realiza as seguintes operações:
    1. Limpa a tela do terminal.
    2. Ignora um aviso específico do pandas relacionado ao SQLAlchemy connectable.
    3. Registra uma mensagem indicando o início do script.

    Returns:
        None

    Raises:
        OSError: Se houver um erro ao executar o comando do sistema para limpar o terminal.
        Warning: Se houver um erro ao configurar a filtragem de avisos.
        Exception: Para quaisquer outros erros inesperados.

  terminal_line: |
    Imprime uma linha de caracteres no terminal.

    Args:
        value (int, optional): O comprimento da linha a ser impressa. O padrão é 79.
        char (str, optional): O caractere a ser repetido para formar a linha. O padrão é '-'.

    Raises:
        ValueError: Se o valor de 'value' for menor ou igual a 0.
        TypeError: Se 'value' não for do tipo inteiro ou 'char' não for do tipo string.
        Exception: Para quaisquer outros erros inesperados.

  get_connection: |
    Inicia a conexao com um banco de dados.

    Args:
        server_name (str): Nome do servidor do banco de dados.
        username (str): Nome de usuario de acesso ao banco de dados.
        password (str): Senha do usuario de acesso ao banco de dados.
        database (str): Nome do banco de dados.
        driver (str): Driver do servidor do banco de dados.
            O padrão é '{ODBC Driver 17 for SQL Server}'.

    Returns:
        Tuple[pyodbc.Cursor, pyodbc.Connection]: Uma tupla contendo o cursor e a conexao com o
            banco de dados.

    Raises:
        pyodbc.Error: Se houver um erro na conexão com o banco de dados.
        FileNotFoundError: Se o arquivo do driver ODBC não for encontrado.
        PermissionError: Se o arquivo do driver ODBC não tiver permissão de acesso.
        Exception: Para quaisquer outros erros inesperados.

  close_connetion: |
    Fecha o cursor e a conexão com o banco de dados.

    Args:
        cursor (Cursor, optional): O cursor a ser fechado. Padrão é None.
        conn (Connection, optional): A conexão a ser fechada. Padrão é None.

  validate_constants: |
    Valida uma lista de caminhos e valores fornecidos.

    Args:
        paths (Union[List[Union[str, Path]], Union[str, Path]]): Caminhos para verificar se existem (arquivos ou pastas).
        values (Union[List[Union[str, None]], Union[str, None]]): Valores para verificar se não são None.

    Raises:
        FileNotFoundError: Se algum caminho não existir.
        ValueError: Se algum valor da lista for None.

  key_names_list: |
    Gera uma lista de strings contendo os números de chave e seus respectivos nomes a partir de um arquivo JSON.

    Args:
        json_file_path (str): O caminho para o arquivo JSON contendo os dados.
        print_terminal (bool): Se True, imprime as informações das chaves no terminal. Default é True.

    Returns:
        list: Uma lista contendo as chaves numéricas do JSON.

    Raises:
        FileNotFoundError: Se o arquivo JSON não for encontrado.
        PermissionError: Se houver permissão negada ao ler o arquivo JSON.
        Exception: Se ocorrer um erro ao ler ou processar o arquivo JSON, a exceção será registrada no logger.

  open_json_file: |
    Abre um arquivo JSON e retorna um dicionário contendo os dados.

    Args:
        json_file_path (Union[str, Path]): Caminho do arquivo JSON.

    Returns:
        Union[dict, None]: Dicionário contendo os dados do arquivo JSON ou None se ocorrer um erro.

    Raises:
        FileNotFoundError: Se o arquivo JSON não for encontrado.
        PermissionError: Se não houver permissão para ler o arquivo JSON.
        json.JSONDecodeError: Se o arquivo JSON estiver malformado.
        Exception: Para quaisquer outros erros inesperados.

  sql_to_dict: |
    Converte um arquivo SQL em um dicionário, onde cada chave é o nome de uma query
        definida por um comentário, e cada valor é o conteúdo SQL da respectiva query.

    O nome da chave é definido pela linha comentada que começa com o `classifier`. O padrão é '--'.
        O conteúdo da query inclui todas as linhas subsequentes até que um novo delimitador
            (comentário) seja encontrado ou o final do arquivo seja alcançado.

    ### Formato esperado do arquivo SQL:

    O arquivo SQL deve estar no seguinte formato, onde cada query é precedida por um comentário de
        nome único:

    ```sql
    --QUERY_1
    SELECT * FROM table_1;
    --QUERY_2
    SELECT * FROM table_2;
    ```

    Args:
        sql_file (Union[str, Path]): Caminho para o arquivo SQL que será lido.
        classifier (str, opcional): Critério para identificar o início de uma query.
            O padrão é '--'.

    Returns:
        dict: Um dicionário onde cada chave é o nome da query (definido pelo comentário) e cada
            valor é o conteúdo SQL associado a essa query.

    Exceptions:
        FileNotFoundError: Se o arquivo SQL não for encontrado.
        PermissionError: Se houver permissão negada ao tentar acessar o arquivo SQL.
        IsADirectoryError: Se o caminho especificado for um diretório em vez de um arquivo.
        UnicodeDecodeError: Se houver um erro ao decodificar o conteúdo do arquivo SQL.
        Exception: Para quaisquer outros erros ao ler o arquivo SQL.

  export_dict_to_csv: |
    Exporta as queries contidas em um dicionário para arquivos CSV em uma subpasta nomeada pelo cliente.

    Args:
        conn (pyodbc.Connection): Conexão com o banco de dados.
        query_dict (dict): Dicionário com as queries como chave e o conteúdo da query como valor.
        output_path (Union[str, Path]): Caminho do diretório onde os arquivos CSV serão salvos.
        client_name (str): Nome da subpasta para salvar os arquivos, baseado no nome do cliente.
        encoding (str): Codificação a ser utilizada para o arquivo CSV.
        quotechar (str): Caractere a ser utilizado para citar os valores do CSV.
        delimiter (str): Separador utilizado entre as colunas do CSV.
        fg_date (bool): Indica se o nome do arquivo deve incluir a data atual.

    Raises:
        Exception: Para erros ao criar a subpasta ou ao exportar os dados.

  get_key_name_variables: |
    Obtém as variáveis de configuração de um dicionário a partir de um arquivo JSON.

    Args:
        key_number (str): Número da chave do dicionário a ser buscado.
        json_file_path (Union[str, Path]): Caminho do arquivo JSON que contém o dicionário.

    Returns:
        Tuple[str, str, str, str, bool, str]:
            key_name (str): Nome da chave do dicionário.
            encoding (str): Codificação a ser utilizada para o arquivo CSV.
            quotechar (str): Caractere a ser utilizado para citar os valores do CSV.
            delimiter (str): Separador utilizado entre as colunas do CSV.
            fg_date (bool): Flag para indicar se o nome do arquivo contém a data atual no formato 'YYYYMMDD'.
                Para mais detalhes, veja a função `export_dict_to_csv`.
            server_name (str): Nome do servidor do banco de dados.

    Raises:
        KeyError: Se o key_number não for encontrado no arquivo JSON ou se qualquer chave esperada estiver ausente.
        FileNotFoundError: Se o arquivo JSON não for encontrado.
        json.JSONDecodeError: Se houver um erro ao decodificar o arquivo JSON.
        PermissionError: Se houver permissão negada ao tentar acessar o arquivo JSON.
        IsADirectoryError: Se o caminho especificado for um diretório em vez de um arquivo.
        Exception: Para quaisquer outros erros inesperados.

  close_connetion: |
    Fecha o cursor e a conexão com o banco de dados.

    Args:
        cursor (Cursor, optional): O cursor a ser fechado. Padrão é None.
        conn (Connection, optional): A conexão a ser fechada. Padrão é None.

  get_client_config: |
    Obtém as configurações de um cliente a partir de um arquivo JSON.

    Args:
        key_name (str): Nome da chave a ser buscada.
        json_file_path (Union[str, Path]): Caminho para o arquivo JSON.

    Returns:
        Optional[dict[str, Optional[str]]]: Dicionário com configurações do cliente ou None se ocorrer erro.


  get_client_config: |
    Encontra um diretório na arvore de pastas e retorna o caminho.

    Args:
        dir_name (str): O nome do diretório a ser encontrado.
        start_dir (Union[str, Path], optional): O caminho do diretório inicial. O padrão é __file__.

    Returns:
        Path: O caminho do diretório encontrado.
